{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useTextToSpeech = () => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [error, setError] = useState(null);\n  const speak = useCallback(text => {\n    if (!window.speechSynthesis) {\n      setError('Text-to-speech is not supported in your browser.');\n      return;\n    }\n    try {\n      // Cancel any ongoing speech\n      window.speechSynthesis.cancel();\n      const utterance = new SpeechSynthesisUtterance(text);\n\n      // Configure voice settings for softer, more human-like speech\n      utterance.rate = 0.9; // Slightly slower for more natural pace\n      utterance.pitch = 0.8; // Lower pitch for softer tone\n      utterance.volume = 0.85; // Slightly lower volume for softer sound\n\n      // Get available voices and set a preferred voice\n      const voices = window.speechSynthesis.getVoices();\n\n      // Try to find a softer, more natural voice\n      const preferredVoice = voices.find(voice => voice.name.includes('Samantha') ||\n      // macOS default female voice\n      voice.name.includes('Microsoft Zira') ||\n      // Windows default female voice\n      voice.name.includes('Google UK English Female') ||\n      // Chrome default\n      voice.name.includes('Microsoft David') ||\n      // Windows default male voice\n      voice.name.includes('Alex') ||\n      // macOS default male voice\n      voice.name.includes('Female') ||\n      // Any female voice\n      voice.name.includes('en-US') // Any US English voice\n      );\n      if (preferredVoice) {\n        utterance.voice = preferredVoice;\n      }\n      utterance.onstart = () => {\n        setIsSpeaking(true);\n        setError(null);\n      };\n      utterance.onend = () => {\n        setIsSpeaking(false);\n      };\n      utterance.onerror = event => {\n        setError(`Error occurred in speech synthesis: ${event.error}`);\n        setIsSpeaking(false);\n      };\n      window.speechSynthesis.speak(utterance);\n    } catch (err) {\n      setError('Failed to speak text.');\n      setIsSpeaking(false);\n    }\n  }, []);\n  const stopSpeaking = useCallback(() => {\n    if (!window.speechSynthesis) return;\n    try {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n    } catch (err) {\n      setError('Failed to stop speaking.');\n    }\n  }, []);\n  return {\n    speak,\n    stopSpeaking,\n    isSpeaking,\n    error\n  };\n};\n_s(useTextToSpeech, \"m6LlmgbN+TA42DFsDTGMe60rVw8=\");","map":{"version":3,"names":["useState","useCallback","useTextToSpeech","_s","isSpeaking","setIsSpeaking","error","setError","speak","text","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","rate","pitch","volume","voices","getVoices","preferredVoice","find","voice","name","includes","onstart","onend","onerror","event","err","stopSpeaking"],"sources":["D:/Amaan/Projects/HomeLLC/Task/voice-chat-bot/src/hooks/useTextToSpeech.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\ninterface TextToSpeechState {\r\n  speak: (text: string) => void;\r\n  stopSpeaking: () => void;\r\n  isSpeaking: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const useTextToSpeech = (): TextToSpeechState => {\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const speak = useCallback((text: string) => {\r\n    if (!window.speechSynthesis) {\r\n      setError('Text-to-speech is not supported in your browser.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Cancel any ongoing speech\r\n      window.speechSynthesis.cancel();\r\n\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      \r\n      // Configure voice settings for softer, more human-like speech\r\n      utterance.rate = 0.9;        // Slightly slower for more natural pace\r\n      utterance.pitch = 0.8;       // Lower pitch for softer tone\r\n      utterance.volume = 0.85;     // Slightly lower volume for softer sound\r\n\r\n      // Get available voices and set a preferred voice\r\n      const voices = window.speechSynthesis.getVoices();\r\n      \r\n      // Try to find a softer, more natural voice\r\n      const preferredVoice = voices.find(voice => \r\n        voice.name.includes('Samantha') ||      // macOS default female voice\r\n        voice.name.includes('Microsoft Zira') || // Windows default female voice\r\n        voice.name.includes('Google UK English Female') || // Chrome default\r\n        voice.name.includes('Microsoft David') || // Windows default male voice\r\n        voice.name.includes('Alex') ||          // macOS default male voice\r\n        voice.name.includes('Female') ||        // Any female voice\r\n        voice.name.includes('en-US')           // Any US English voice\r\n      );\r\n      \r\n      if (preferredVoice) {\r\n        utterance.voice = preferredVoice;\r\n      }\r\n\r\n      utterance.onstart = () => {\r\n        setIsSpeaking(true);\r\n        setError(null);\r\n      };\r\n\r\n      utterance.onend = () => {\r\n        setIsSpeaking(false);\r\n      };\r\n\r\n      utterance.onerror = (event) => {\r\n        setError(`Error occurred in speech synthesis: ${event.error}`);\r\n        setIsSpeaking(false);\r\n      };\r\n\r\n      window.speechSynthesis.speak(utterance);\r\n    } catch (err) {\r\n      setError('Failed to speak text.');\r\n      setIsSpeaking(false);\r\n    }\r\n  }, []);\r\n\r\n  const stopSpeaking = useCallback(() => {\r\n    if (!window.speechSynthesis) return;\r\n\r\n    try {\r\n      window.speechSynthesis.cancel();\r\n      setIsSpeaking(false);\r\n    } catch (err) {\r\n      setError('Failed to stop speaking.');\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    speak,\r\n    stopSpeaking,\r\n    isSpeaking,\r\n    error\r\n  };\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAS7C,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAyB;EAAAC,EAAA;EACtD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMQ,KAAK,GAAGP,WAAW,CAAEQ,IAAY,IAAK;IAC1C,IAAI,CAACC,MAAM,CAACC,eAAe,EAAE;MAC3BJ,QAAQ,CAAC,kDAAkD,CAAC;MAC5D;IACF;IAEA,IAAI;MACF;MACAG,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;MAE/B,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACL,IAAI,CAAC;;MAEpD;MACAI,SAAS,CAACE,IAAI,GAAG,GAAG,CAAC,CAAQ;MAC7BF,SAAS,CAACG,KAAK,GAAG,GAAG,CAAC,CAAO;MAC7BH,SAAS,CAACI,MAAM,GAAG,IAAI,CAAC,CAAK;;MAE7B;MACA,MAAMC,MAAM,GAAGR,MAAM,CAACC,eAAe,CAACQ,SAAS,CAAC,CAAC;;MAEjD;MACA,MAAMC,cAAc,GAAGF,MAAM,CAACG,IAAI,CAACC,KAAK,IACtCA,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC;MAAS;MACxCF,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,gBAAgB,CAAC;MAAI;MACzCF,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,0BAA0B,CAAC;MAAI;MACnDF,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,iBAAiB,CAAC;MAAI;MAC1CF,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC;MAAa;MACxCF,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC;MAAW;MACxCF,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,CAAW;MACzC,CAAC;MAED,IAAIJ,cAAc,EAAE;QAClBP,SAAS,CAACS,KAAK,GAAGF,cAAc;MAClC;MAEAP,SAAS,CAACY,OAAO,GAAG,MAAM;QACxBpB,aAAa,CAAC,IAAI,CAAC;QACnBE,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC;MAEDM,SAAS,CAACa,KAAK,GAAG,MAAM;QACtBrB,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC;MAEDQ,SAAS,CAACc,OAAO,GAAIC,KAAK,IAAK;QAC7BrB,QAAQ,CAAC,uCAAuCqB,KAAK,CAACtB,KAAK,EAAE,CAAC;QAC9DD,aAAa,CAAC,KAAK,CAAC;MACtB,CAAC;MAEDK,MAAM,CAACC,eAAe,CAACH,KAAK,CAACK,SAAS,CAAC;IACzC,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZtB,QAAQ,CAAC,uBAAuB,CAAC;MACjCF,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMyB,YAAY,GAAG7B,WAAW,CAAC,MAAM;IACrC,IAAI,CAACS,MAAM,CAACC,eAAe,EAAE;IAE7B,IAAI;MACFD,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;MAC/BP,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC,CAAC,OAAOwB,GAAG,EAAE;MACZtB,QAAQ,CAAC,0BAA0B,CAAC;IACtC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLC,KAAK;IACLsB,YAAY;IACZ1B,UAAU;IACVE;EACF,CAAC;AACH,CAAC;AAACH,EAAA,CA7EWD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}