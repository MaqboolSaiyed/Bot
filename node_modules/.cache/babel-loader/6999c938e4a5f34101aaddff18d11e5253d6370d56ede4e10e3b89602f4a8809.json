{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useTextToSpeech = () => {\n  _s();\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [error, setError] = useState(null);\n  const speak = useCallback(text => {\n    if (!window.speechSynthesis) {\n      setError('Text-to-speech is not supported in your browser.');\n      return;\n    }\n    try {\n      // Cancel any ongoing speech\n      window.speechSynthesis.cancel();\n      const utterance = new SpeechSynthesisUtterance(text);\n\n      // Configure voice settings for better quality\n      utterance.rate = 0.85; // Slower for clearer speech\n      utterance.pitch = 0.9; // Slightly lower pitch\n      utterance.volume = 0.9; // Good volume level\n\n      // Get available voices\n      const voices = window.speechSynthesis.getVoices();\n\n      // Try to find the best available voice\n      let selectedVoice = null;\n\n      // Priority list of preferred voices (Alexa and other high-quality voices)\n      const voicePreferences = ['Alexa', 'Amazon Polly', 'Amazon Polly Joanna', 'Amazon Polly Matthew', 'Amazon Polly Salli', 'Amazon Polly Kimberly', 'Amazon Polly Kendra', 'Amazon Polly Justin', 'Google UK English Female', 'Google UK English Male', 'Google US English Female', 'Google US English Male', 'Microsoft Zira', 'Microsoft David', 'Samantha', 'Alex', 'Victoria', 'Daniel', 'Karen', 'Tom'];\n\n      // Try to find a preferred voice\n      for (const preference of voicePreferences) {\n        const voice = voices.find(v => v.name.includes(preference) || v.name.toLowerCase().includes(preference.toLowerCase()));\n        if (voice) {\n          selectedVoice = voice;\n          break;\n        }\n      }\n\n      // If no preferred voice found, try to find any Amazon or high-quality voice\n      if (!selectedVoice) {\n        // Look for voices with \"Amazon\", \"Alexa\", \"Google\" or \"Microsoft\" in the name\n        selectedVoice = voices.find(voice => voice.name.includes('Amazon') || voice.name.includes('Alexa') || voice.name.includes('Google') || voice.name.includes('Microsoft') || voice.name.includes('Samantha') || voice.name.includes('Alex'));\n      }\n\n      // If still no voice found, use the first available voice\n      if (!selectedVoice && voices.length > 0) {\n        selectedVoice = voices[0];\n      }\n      if (selectedVoice) {\n        utterance.voice = selectedVoice;\n        console.log('Using voice:', selectedVoice.name);\n\n        // Log all available voices for debugging\n        console.log('Available voices:', voices.map(v => v.name));\n      }\n      utterance.onstart = () => {\n        setIsSpeaking(true);\n        setError(null);\n      };\n      utterance.onend = () => {\n        setIsSpeaking(false);\n      };\n      utterance.onerror = event => {\n        setError(`Error occurred in speech synthesis: ${event.error}`);\n        setIsSpeaking(false);\n      };\n      window.speechSynthesis.speak(utterance);\n    } catch (err) {\n      setError('Failed to speak text.');\n      setIsSpeaking(false);\n    }\n  }, []);\n  const stopSpeaking = useCallback(() => {\n    if (!window.speechSynthesis) return;\n    try {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n    } catch (err) {\n      setError('Failed to stop speaking.');\n    }\n  }, []);\n  return {\n    speak,\n    stopSpeaking,\n    isSpeaking,\n    error\n  };\n};\n_s(useTextToSpeech, \"m6LlmgbN+TA42DFsDTGMe60rVw8=\");","map":{"version":3,"names":["useState","useCallback","useTextToSpeech","_s","isSpeaking","setIsSpeaking","error","setError","speak","text","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","rate","pitch","volume","voices","getVoices","selectedVoice","voicePreferences","preference","voice","find","v","name","includes","toLowerCase","length","console","log","map","onstart","onend","onerror","event","err","stopSpeaking"],"sources":["D:/Amaan/Projects/HomeLLC/Task/voice-chat-bot/src/hooks/useTextToSpeech.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\ninterface TextToSpeechState {\r\n  speak: (text: string) => void;\r\n  stopSpeaking: () => void;\r\n  isSpeaking: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const useTextToSpeech = (): TextToSpeechState => {\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const speak = useCallback((text: string) => {\r\n    if (!window.speechSynthesis) {\r\n      setError('Text-to-speech is not supported in your browser.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Cancel any ongoing speech\r\n      window.speechSynthesis.cancel();\r\n\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      \r\n      // Configure voice settings for better quality\r\n      utterance.rate = 0.85;        // Slower for clearer speech\r\n      utterance.pitch = 0.9;        // Slightly lower pitch\r\n      utterance.volume = 0.9;       // Good volume level\r\n\r\n      // Get available voices\r\n      const voices = window.speechSynthesis.getVoices();\r\n      \r\n      // Try to find the best available voice\r\n      let selectedVoice = null;\r\n      \r\n      // Priority list of preferred voices (Alexa and other high-quality voices)\r\n      const voicePreferences = [\r\n        'Alexa',\r\n        'Amazon Polly',\r\n        'Amazon Polly Joanna',\r\n        'Amazon Polly Matthew',\r\n        'Amazon Polly Salli',\r\n        'Amazon Polly Kimberly',\r\n        'Amazon Polly Kendra',\r\n        'Amazon Polly Justin',\r\n        'Google UK English Female',\r\n        'Google UK English Male', \r\n        'Google US English Female',\r\n        'Google US English Male',\r\n        'Microsoft Zira',\r\n        'Microsoft David',\r\n        'Samantha',\r\n        'Alex',\r\n        'Victoria',\r\n        'Daniel',\r\n        'Karen',\r\n        'Tom'\r\n      ];\r\n\r\n      // Try to find a preferred voice\r\n      for (const preference of voicePreferences) {\r\n        const voice = voices.find(v => \r\n          v.name.includes(preference) || \r\n          v.name.toLowerCase().includes(preference.toLowerCase())\r\n        );\r\n        if (voice) {\r\n          selectedVoice = voice;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // If no preferred voice found, try to find any Amazon or high-quality voice\r\n      if (!selectedVoice) {\r\n        // Look for voices with \"Amazon\", \"Alexa\", \"Google\" or \"Microsoft\" in the name\r\n        selectedVoice = voices.find(voice => \r\n          voice.name.includes('Amazon') ||\r\n          voice.name.includes('Alexa') ||\r\n          voice.name.includes('Google') || \r\n          voice.name.includes('Microsoft') ||\r\n          voice.name.includes('Samantha') ||\r\n          voice.name.includes('Alex')\r\n        );\r\n      }\r\n\r\n      // If still no voice found, use the first available voice\r\n      if (!selectedVoice && voices.length > 0) {\r\n        selectedVoice = voices[0];\r\n      }\r\n\r\n      if (selectedVoice) {\r\n        utterance.voice = selectedVoice;\r\n        console.log('Using voice:', selectedVoice.name);\r\n        \r\n        // Log all available voices for debugging\r\n        console.log('Available voices:', voices.map(v => v.name));\r\n      }\r\n\r\n      utterance.onstart = () => {\r\n        setIsSpeaking(true);\r\n        setError(null);\r\n      };\r\n\r\n      utterance.onend = () => {\r\n        setIsSpeaking(false);\r\n      };\r\n\r\n      utterance.onerror = (event) => {\r\n        setError(`Error occurred in speech synthesis: ${event.error}`);\r\n        setIsSpeaking(false);\r\n      };\r\n\r\n      window.speechSynthesis.speak(utterance);\r\n    } catch (err) {\r\n      setError('Failed to speak text.');\r\n      setIsSpeaking(false);\r\n    }\r\n  }, []);\r\n\r\n  const stopSpeaking = useCallback(() => {\r\n    if (!window.speechSynthesis) return;\r\n\r\n    try {\r\n      window.speechSynthesis.cancel();\r\n      setIsSpeaking(false);\r\n    } catch (err) {\r\n      setError('Failed to stop speaking.');\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    speak,\r\n    stopSpeaking,\r\n    isSpeaking,\r\n    error\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}