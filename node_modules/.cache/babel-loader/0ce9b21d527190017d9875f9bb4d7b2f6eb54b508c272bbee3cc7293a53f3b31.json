{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nexport const useVoiceRecognition = () => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [finalTranscript, setFinalTranscript] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if browser supports speech recognition\n  const recognition = useMemo(() => {\n    if (typeof window === 'undefined') return null;\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    return SpeechRecognition ? new SpeechRecognition() : null;\n  }, []);\n  useEffect(() => {\n    if (!recognition) {\n      setError('Speech recognition is not supported in your browser.');\n      return;\n    }\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n    recognition.onresult = event => {\n      let interimTranscript = '';\n      let finalTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript;\n        } else {\n          interimTranscript += transcript;\n        }\n      }\n\n      // Update the interim transcript for real-time display\n      setTranscript(interimTranscript);\n\n      // Store the final transcript (will be used when listening stops)\n      if (finalTranscript) {\n        setFinalTranscript(prev => prev + finalTranscript);\n      }\n    };\n    recognition.onerror = event => {\n      setError(`Error occurred in recognition: ${event.error}`);\n      setIsListening(false);\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n    return () => {\n      if (isListening) {\n        recognition.stop();\n      }\n    };\n  }, [recognition, isListening]);\n  const startListening = useCallback(() => {\n    if (!recognition) {\n      setError('Speech recognition is not supported in your browser.');\n      return;\n    }\n    try {\n      // Clear previous transcripts\n      setTranscript('');\n      setFinalTranscript('');\n      setError(null);\n      recognition.start();\n      setIsListening(true);\n    } catch (err) {\n      setError('Failed to start listening.');\n      setIsListening(false);\n    }\n  }, [recognition]);\n  const stopListening = useCallback(() => {\n    if (!recognition) return;\n    try {\n      recognition.stop();\n      setIsListening(false);\n    } catch (err) {\n      setError('Failed to stop listening.');\n    }\n  }, [recognition]);\n  return {\n    transcript,\n    isListening,\n    startListening,\n    stopListening,\n    error,\n    finalTranscript\n  };\n};\n_s(useVoiceRecognition, \"niUSZgHxrqfYPpH84r09aBtTTH0=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","useVoiceRecognition","_s","transcript","setTranscript","finalTranscript","setFinalTranscript","isListening","setIsListening","error","setError","recognition","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","i","resultIndex","results","length","isFinal","prev","onerror","onend","stop","startListening","start","err","stopListening"],"sources":["D:/Amaan/Projects/HomeLLC/Task/voice-chat-bot/src/hooks/useVoiceRecognition.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\r\n\r\ninterface VoiceRecognitionState {\r\n  transcript: string;\r\n  isListening: boolean;\r\n  startListening: () => void;\r\n  stopListening: () => void;\r\n  error: string | null;\r\n  finalTranscript: string;\r\n}\r\n\r\nexport const useVoiceRecognition = (): VoiceRecognitionState => {\r\n  const [transcript, setTranscript] = useState('');\r\n  const [finalTranscript, setFinalTranscript] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Check if browser supports speech recognition\r\n  const recognition = useMemo(() => {\r\n    if (typeof window === 'undefined') return null;\r\n    \r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    return SpeechRecognition ? new SpeechRecognition() : null;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!recognition) {\r\n      setError('Speech recognition is not supported in your browser.');\r\n      return;\r\n    }\r\n\r\n    recognition.continuous = true;\r\n    recognition.interimResults = true;\r\n    recognition.lang = 'en-US';\r\n\r\n    recognition.onresult = (event: SpeechRecognitionEvent) => {\r\n      let interimTranscript = '';\r\n      let finalTranscript = '';\r\n\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        const transcript = event.results[i][0].transcript;\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript += transcript;\r\n        } else {\r\n          interimTranscript += transcript;\r\n        }\r\n      }\r\n\r\n      // Update the interim transcript for real-time display\r\n      setTranscript(interimTranscript);\r\n      \r\n      // Store the final transcript (will be used when listening stops)\r\n      if (finalTranscript) {\r\n        setFinalTranscript(prev => prev + finalTranscript);\r\n      }\r\n    };\r\n\r\n    recognition.onerror = (event: SpeechRecognitionErrorEvent) => {\r\n      setError(`Error occurred in recognition: ${event.error}`);\r\n      setIsListening(false);\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      setIsListening(false);\r\n    };\r\n\r\n    return () => {\r\n      if (isListening) {\r\n        recognition.stop();\r\n      }\r\n    };\r\n  }, [recognition, isListening]);\r\n\r\n  const startListening = useCallback(() => {\r\n    if (!recognition) {\r\n      setError('Speech recognition is not supported in your browser.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Clear previous transcripts\r\n      setTranscript('');\r\n      setFinalTranscript('');\r\n      setError(null);\r\n      \r\n      recognition.start();\r\n      setIsListening(true);\r\n    } catch (err) {\r\n      setError('Failed to start listening.');\r\n      setIsListening(false);\r\n    }\r\n  }, [recognition]);\r\n\r\n  const stopListening = useCallback(() => {\r\n    if (!recognition) return;\r\n\r\n    try {\r\n      recognition.stop();\r\n      setIsListening(false);\r\n    } catch (err) {\r\n      setError('Failed to stop listening.');\r\n    }\r\n  }, [recognition]);\r\n\r\n  return {\r\n    transcript,\r\n    isListening,\r\n    startListening,\r\n    stopListening,\r\n    error,\r\n    finalTranscript\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}